/**
 * Attribute extraction and building functions for MCP server instrumentation
 */
import type { ExtraHandlerData, JsonRpcNotification, JsonRpcRequest, McpSpanType, MCPTransport, SessionData } from './types';
/**
 * Extracts transport types based on transport constructor name
 * @param transport - MCP transport instance
 * @returns Transport type mapping for span attributes
 */
export declare function getTransportTypes(transport: MCPTransport): {
    mcpTransport: string;
    networkTransport: string;
};
/**
 * Extracts additional attributes for specific notification types
 * @param method - Notification method name
 * @param params - Notification parameters
 * @returns Method-specific attributes for span instrumentation
 */
export declare function getNotificationAttributes(method: string, params: Record<string, unknown>): Record<string, string | number>;
/**
 * Extracts session data from "initialize" requests
 * @param request - JSON-RPC "initialize" request containing client info and protocol version
 * @returns Session data extracted from request parameters including protocol version and client info
 */
export declare function extractSessionDataFromInitializeRequest(request: JsonRpcRequest): SessionData;
/**
 * Extracts session data from "initialize" response
 * @param result - "initialize" response result containing server info and protocol version
 * @returns Partial session data extracted from response including protocol version and server info
 */
export declare function extractSessionDataFromInitializeResponse(result: unknown): Partial<SessionData>;
/**
 * Build client attributes from stored client info
 * @param transport - MCP transport instance
 * @returns Client attributes for span instrumentation
 */
export declare function getClientAttributes(transport: MCPTransport): Record<string, string>;
/**
 * Build server attributes from stored server info
 * @param transport - MCP transport instance
 * @returns Server attributes for span instrumentation
 */
export declare function getServerAttributes(transport: MCPTransport): Record<string, string>;
/**
 * Extracts client connection info from extra handler data
 * @param extra - Extra handler data containing connection info
 * @returns Client address and port information
 */
export declare function extractClientInfo(extra: ExtraHandlerData): {
    address?: string;
    port?: number;
};
/**
 * Build transport and network attributes
 * @param transport - MCP transport instance
 * @param extra - Optional extra handler data
 * @returns Transport attributes for span instrumentation
 */
export declare function buildTransportAttributes(transport: MCPTransport, extra?: ExtraHandlerData): Record<string, string | number>;
/**
 * Build type-specific attributes based on message type
 * @param type - Span type (request or notification)
 * @param message - JSON-RPC message
 * @param params - Optional parameters for attribute extraction
 * @returns Type-specific attributes for span instrumentation
 */
export declare function buildTypeSpecificAttributes(type: McpSpanType, message: JsonRpcRequest | JsonRpcNotification, params?: Record<string, unknown>): Record<string, string | number>;
/**
 * Extract tool result attributes for span instrumentation
 * @param result - Tool execution result
 * @returns Attributes extracted from tool result content
 */
export declare function extractToolResultAttributes(result: unknown): Record<string, string | number | boolean>;
//# sourceMappingURL=attributeExtraction.d.ts.map