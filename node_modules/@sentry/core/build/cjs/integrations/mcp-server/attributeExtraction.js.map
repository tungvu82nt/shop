{"version":3,"file":"attributeExtraction.js","sources":["../../../../src/integrations/mcp-server/attributeExtraction.ts"],"sourcesContent":["/**\n * Attribute extraction and building functions for MCP server instrumentation\n */\n\nimport { isURLObjectRelative, parseStringToURLObject } from '../../utils/url';\nimport {\n  CLIENT_ADDRESS_ATTRIBUTE,\n  CLIENT_PORT_ATTRIBUTE,\n  MCP_LOGGING_DATA_TYPE_ATTRIBUTE,\n  MCP_LOGGING_LEVEL_ATTRIBUTE,\n  MCP_LOGGING_LOGGER_ATTRIBUTE,\n  MCP_LOGGING_MESSAGE_ATTRIBUTE,\n  MCP_PROTOCOL_VERSION_ATTRIBUTE,\n  MCP_REQUEST_ID_ATTRIBUTE,\n  MCP_RESOURCE_URI_ATTRIBUTE,\n  MCP_SERVER_NAME_ATTRIBUTE,\n  MCP_SERVER_TITLE_ATTRIBUTE,\n  MCP_SERVER_VERSION_ATTRIBUTE,\n  MCP_SESSION_ID_ATTRIBUTE,\n  MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE,\n  MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE,\n  MCP_TRANSPORT_ATTRIBUTE,\n  NETWORK_PROTOCOL_VERSION_ATTRIBUTE,\n  NETWORK_TRANSPORT_ATTRIBUTE,\n} from './attributes';\nimport { extractTargetInfo, getRequestArguments } from './methodConfig';\nimport {\n  getClientInfoForTransport,\n  getProtocolVersionForTransport,\n  getSessionDataForTransport,\n} from './sessionManagement';\nimport type {\n  ExtraHandlerData,\n  JsonRpcNotification,\n  JsonRpcRequest,\n  McpSpanType,\n  MCPTransport,\n  PartyInfo,\n  SessionData,\n} from './types';\n\n/**\n * Extracts transport types based on transport constructor name\n * @param transport - MCP transport instance\n * @returns Transport type mapping for span attributes\n */\nexport function getTransportTypes(transport: MCPTransport): { mcpTransport: string; networkTransport: string } {\n  const transportName = transport.constructor?.name?.toLowerCase() || '';\n\n  if (transportName.includes('stdio')) {\n    return { mcpTransport: 'stdio', networkTransport: 'pipe' };\n  }\n\n  if (transportName.includes('streamablehttp') || transportName.includes('streamable')) {\n    return { mcpTransport: 'http', networkTransport: 'tcp' };\n  }\n\n  if (transportName.includes('sse')) {\n    return { mcpTransport: 'sse', networkTransport: 'tcp' };\n  }\n\n  return { mcpTransport: 'unknown', networkTransport: 'unknown' };\n}\n\n/**\n * Extracts additional attributes for specific notification types\n * @param method - Notification method name\n * @param params - Notification parameters\n * @returns Method-specific attributes for span instrumentation\n */\nexport function getNotificationAttributes(\n  method: string,\n  params: Record<string, unknown>,\n): Record<string, string | number> {\n  const attributes: Record<string, string | number> = {};\n\n  switch (method) {\n    case 'notifications/cancelled':\n      if (params?.requestId) {\n        attributes['mcp.cancelled.request_id'] = String(params.requestId);\n      }\n      if (params?.reason) {\n        attributes['mcp.cancelled.reason'] = String(params.reason);\n      }\n      break;\n\n    case 'notifications/message':\n      if (params?.level) {\n        attributes[MCP_LOGGING_LEVEL_ATTRIBUTE] = String(params.level);\n      }\n      if (params?.logger) {\n        attributes[MCP_LOGGING_LOGGER_ATTRIBUTE] = String(params.logger);\n      }\n      if (params?.data !== undefined) {\n        attributes[MCP_LOGGING_DATA_TYPE_ATTRIBUTE] = typeof params.data;\n        if (typeof params.data === 'string') {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = params.data;\n        } else {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = JSON.stringify(params.data);\n        }\n      }\n      break;\n\n    case 'notifications/progress':\n      if (params?.progressToken) {\n        attributes['mcp.progress.token'] = String(params.progressToken);\n      }\n      if (typeof params?.progress === 'number') {\n        attributes['mcp.progress.current'] = params.progress;\n      }\n      if (typeof params?.total === 'number') {\n        attributes['mcp.progress.total'] = params.total;\n        if (typeof params?.progress === 'number') {\n          attributes['mcp.progress.percentage'] = (params.progress / params.total) * 100;\n        }\n      }\n      if (params?.message) {\n        attributes['mcp.progress.message'] = String(params.message);\n      }\n      break;\n\n    case 'notifications/resources/updated':\n      if (params?.uri) {\n        attributes[MCP_RESOURCE_URI_ATTRIBUTE] = String(params.uri);\n        const urlObject = parseStringToURLObject(String(params.uri));\n        if (urlObject && !isURLObjectRelative(urlObject)) {\n          attributes['mcp.resource.protocol'] = urlObject.protocol.replace(':', '');\n        }\n      }\n      break;\n\n    case 'notifications/initialized':\n      attributes['mcp.lifecycle.phase'] = 'initialization_complete';\n      attributes['mcp.protocol.ready'] = 1;\n      break;\n  }\n\n  return attributes;\n}\n\n/**\n * Extracts and validates PartyInfo from an unknown object\n * @param obj - Unknown object that might contain party info\n * @returns Validated PartyInfo object with only string properties\n */\nfunction extractPartyInfo(obj: unknown): PartyInfo {\n  const partyInfo: PartyInfo = {};\n\n  if (obj && typeof obj === 'object' && obj !== null) {\n    const source = obj as Record<string, unknown>;\n    if (typeof source.name === 'string') partyInfo.name = source.name;\n    if (typeof source.title === 'string') partyInfo.title = source.title;\n    if (typeof source.version === 'string') partyInfo.version = source.version;\n  }\n\n  return partyInfo;\n}\n\n/**\n * Extracts session data from \"initialize\" requests\n * @param request - JSON-RPC \"initialize\" request containing client info and protocol version\n * @returns Session data extracted from request parameters including protocol version and client info\n */\nexport function extractSessionDataFromInitializeRequest(request: JsonRpcRequest): SessionData {\n  const sessionData: SessionData = {};\n  if (request.params && typeof request.params === 'object' && request.params !== null) {\n    const params = request.params as Record<string, unknown>;\n    if (typeof params.protocolVersion === 'string') {\n      sessionData.protocolVersion = params.protocolVersion;\n    }\n    if (params.clientInfo) {\n      sessionData.clientInfo = extractPartyInfo(params.clientInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Extracts session data from \"initialize\" response\n * @param result - \"initialize\" response result containing server info and protocol version\n * @returns Partial session data extracted from response including protocol version and server info\n */\nexport function extractSessionDataFromInitializeResponse(result: unknown): Partial<SessionData> {\n  const sessionData: Partial<SessionData> = {};\n  if (result && typeof result === 'object') {\n    const resultObj = result as Record<string, unknown>;\n    if (typeof resultObj.protocolVersion === 'string') sessionData.protocolVersion = resultObj.protocolVersion;\n    if (resultObj.serverInfo) {\n      sessionData.serverInfo = extractPartyInfo(resultObj.serverInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Build client attributes from stored client info\n * @param transport - MCP transport instance\n * @returns Client attributes for span instrumentation\n */\nexport function getClientAttributes(transport: MCPTransport): Record<string, string> {\n  const clientInfo = getClientInfoForTransport(transport);\n  const attributes: Record<string, string> = {};\n\n  if (clientInfo?.name) {\n    attributes['mcp.client.name'] = clientInfo.name;\n  }\n  if (clientInfo?.title) {\n    attributes['mcp.client.title'] = clientInfo.title;\n  }\n  if (clientInfo?.version) {\n    attributes['mcp.client.version'] = clientInfo.version;\n  }\n\n  return attributes;\n}\n\n/**\n * Build server attributes from stored server info\n * @param transport - MCP transport instance\n * @returns Server attributes for span instrumentation\n */\nexport function getServerAttributes(transport: MCPTransport): Record<string, string> {\n  const serverInfo = getSessionDataForTransport(transport)?.serverInfo;\n  const attributes: Record<string, string> = {};\n\n  if (serverInfo?.name) {\n    attributes[MCP_SERVER_NAME_ATTRIBUTE] = serverInfo.name;\n  }\n  if (serverInfo?.title) {\n    attributes[MCP_SERVER_TITLE_ATTRIBUTE] = serverInfo.title;\n  }\n  if (serverInfo?.version) {\n    attributes[MCP_SERVER_VERSION_ATTRIBUTE] = serverInfo.version;\n  }\n\n  return attributes;\n}\n\n/**\n * Extracts client connection info from extra handler data\n * @param extra - Extra handler data containing connection info\n * @returns Client address and port information\n */\nexport function extractClientInfo(extra: ExtraHandlerData): {\n  address?: string;\n  port?: number;\n} {\n  return {\n    address:\n      extra?.requestInfo?.remoteAddress ||\n      extra?.clientAddress ||\n      extra?.request?.ip ||\n      extra?.request?.connection?.remoteAddress,\n    port: extra?.requestInfo?.remotePort || extra?.clientPort || extra?.request?.connection?.remotePort,\n  };\n}\n\n/**\n * Build transport and network attributes\n * @param transport - MCP transport instance\n * @param extra - Optional extra handler data\n * @returns Transport attributes for span instrumentation\n */\nexport function buildTransportAttributes(\n  transport: MCPTransport,\n  extra?: ExtraHandlerData,\n): Record<string, string | number> {\n  const sessionId = transport.sessionId;\n  const clientInfo = extra ? extractClientInfo(extra) : {};\n  const { mcpTransport, networkTransport } = getTransportTypes(transport);\n  const clientAttributes = getClientAttributes(transport);\n  const serverAttributes = getServerAttributes(transport);\n  const protocolVersion = getProtocolVersionForTransport(transport);\n\n  const attributes = {\n    ...(sessionId && { [MCP_SESSION_ID_ATTRIBUTE]: sessionId }),\n    ...(clientInfo.address && { [CLIENT_ADDRESS_ATTRIBUTE]: clientInfo.address }),\n    ...(clientInfo.port && { [CLIENT_PORT_ATTRIBUTE]: clientInfo.port }),\n    [MCP_TRANSPORT_ATTRIBUTE]: mcpTransport,\n    [NETWORK_TRANSPORT_ATTRIBUTE]: networkTransport,\n    [NETWORK_PROTOCOL_VERSION_ATTRIBUTE]: '2.0',\n    ...(protocolVersion && { [MCP_PROTOCOL_VERSION_ATTRIBUTE]: protocolVersion }),\n    ...clientAttributes,\n    ...serverAttributes,\n  };\n\n  return attributes;\n}\n\n/**\n * Build type-specific attributes based on message type\n * @param type - Span type (request or notification)\n * @param message - JSON-RPC message\n * @param params - Optional parameters for attribute extraction\n * @returns Type-specific attributes for span instrumentation\n */\nexport function buildTypeSpecificAttributes(\n  type: McpSpanType,\n  message: JsonRpcRequest | JsonRpcNotification,\n  params?: Record<string, unknown>,\n): Record<string, string | number> {\n  if (type === 'request') {\n    const request = message as JsonRpcRequest;\n    const targetInfo = extractTargetInfo(request.method, params || {});\n\n    return {\n      ...(request.id !== undefined && { [MCP_REQUEST_ID_ATTRIBUTE]: String(request.id) }),\n      ...targetInfo.attributes,\n      ...getRequestArguments(request.method, params || {}),\n    };\n  }\n\n  return getNotificationAttributes(message.method, params || {});\n}\n\n/**\n * Build attributes for tool result content items\n * @param content - Array of content items from tool result\n * @returns Attributes extracted from each content item including type, text, mime type, URI, and resource info\n */\nfunction buildAllContentItemAttributes(content: unknown[]): Record<string, string | number> {\n  const attributes: Record<string, string | number> = {\n    [MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE]: content.length,\n  };\n\n  for (const [i, item] of content.entries()) {\n    if (typeof item !== 'object' || item === null) continue;\n\n    const contentItem = item as Record<string, unknown>;\n    const prefix = content.length === 1 ? 'mcp.tool.result' : `mcp.tool.result.${i}`;\n\n    const safeSet = (key: string, value: unknown): void => {\n      if (typeof value === 'string') attributes[`${prefix}.${key}`] = value;\n    };\n\n    safeSet('content_type', contentItem.type);\n    safeSet('mime_type', contentItem.mimeType);\n    safeSet('uri', contentItem.uri);\n    safeSet('name', contentItem.name);\n\n    if (typeof contentItem.text === 'string') {\n      const text = contentItem.text;\n      const maxLength = 500;\n      attributes[`${prefix}.content`] = text.length > maxLength ? `${text.slice(0, maxLength - 3)}...` : text;\n    }\n\n    if (typeof contentItem.data === 'string') {\n      attributes[`${prefix}.data_size`] = contentItem.data.length;\n    }\n\n    const resource = contentItem.resource;\n    if (typeof resource === 'object' && resource !== null) {\n      const res = resource as Record<string, unknown>;\n      safeSet('resource_uri', res.uri);\n      safeSet('resource_mime_type', res.mimeType);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Extract tool result attributes for span instrumentation\n * @param result - Tool execution result\n * @returns Attributes extracted from tool result content\n */\nexport function extractToolResultAttributes(result: unknown): Record<string, string | number | boolean> {\n  let attributes: Record<string, string | number | boolean> = {};\n  if (typeof result !== 'object' || result === null) return attributes;\n\n  const resultObj = result as Record<string, unknown>;\n  if (typeof resultObj.isError === 'boolean') {\n    attributes[MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE] = resultObj.isError;\n  }\n  if (Array.isArray(resultObj.content)) {\n    attributes = { ...attributes, ...buildAllContentItemAttributes(resultObj.content) };\n  }\n  return attributes;\n}\n"],"names":["attributes","MCP_LOGGING_LEVEL_ATTRIBUTE","MCP_LOGGING_LOGGER_ATTRIBUTE","MCP_LOGGING_DATA_TYPE_ATTRIBUTE","MCP_LOGGING_MESSAGE_ATTRIBUTE","MCP_RESOURCE_URI_ATTRIBUTE","parseStringToURLObject","isURLObjectRelative","getClientInfoForTransport","getSessionDataForTransport","MCP_SERVER_NAME_ATTRIBUTE","MCP_SERVER_TITLE_ATTRIBUTE","MCP_SERVER_VERSION_ATTRIBUTE","getProtocolVersionForTransport","MCP_SESSION_ID_ATTRIBUTE","CLIENT_ADDRESS_ATTRIBUTE","CLIENT_PORT_ATTRIBUTE","MCP_TRANSPORT_ATTRIBUTE","NETWORK_TRANSPORT_ATTRIBUTE","NETWORK_PROTOCOL_VERSION_ATTRIBUTE","MCP_PROTOCOL_VERSION_ATTRIBUTE","extractTargetInfo","MCP_REQUEST_ID_ATTRIBUTE","getRequestArguments","MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE","MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE"],"mappings":"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"}