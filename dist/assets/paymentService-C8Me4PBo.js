var u=Object.defineProperty;var p=(a,n,e)=>n in a?u(a,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[n]=e;var o=(a,n,e)=>p(a,typeof n!="symbol"?n+"":n,e);class y{constructor(){o(this,"vnpUrl","https://sandbox.vnpayment.vn/paymentv2/vpcpay.html");o(this,"vnpTmnCode","DEMO");o(this,"vnpHashSecret","DEMO")}async createPaymentUrl(n){try{const e={vnp_Version:"2.1.0",vnp_Command:"pay",vnp_TmnCode:this.vnpTmnCode,vnp_Amount:(n.amount*100).toString(),vnp_CurrCode:"VND",vnp_TxnRef:n.orderId,vnp_OrderInfo:n.orderInfo,vnp_OrderType:"other",vnp_Locale:"vn",vnp_ReturnUrl:n.returnUrl,vnp_IpAddr:"127.0.0.1",vnp_CreateDate:new Date().toISOString().replace(/[-:]/g,"").split(".")[0]};return{success:!0,paymentUrl:`${this.vnpUrl}?${new URLSearchParams(e).toString()}`,transactionId:n.orderId,message:"Tạo URL thanh toán thành công"}}catch(e){return console.error("VNPay payment error:",e),{success:!1,message:"Có lỗi xảy ra khi tạo URL thanh toán VNPay"}}}async verifyPayment(n){try{const e=n.get("vnp_ResponseCode"),s=n.get("vnp_TxnRef"),t=n.get("vnp_Amount"),r=n.get("vnp_TransactionNo"),c=n.get("vnp_PayDate"),h=!0;return{orderId:s||"",status:e==="00"?"success":"failed",transactionId:r||void 0,amount:parseInt(t||"0")/100,paymentMethod:"vnpay",paidAt:c||void 0}}catch(e){throw console.error("VNPay verification error:",e),new Error("Lỗi xác thực thanh toán VNPay")}}}class v{constructor(){o(this,"momoEndpoint","https://test-payment.momo.vn/v2/gateway/api/create");o(this,"partnerCode","DEMO");o(this,"accessKey","DEMO");o(this,"secretKey","DEMO")}async createPayment(n){try{const e=`${n.orderId}_${Date.now()}`,s=n.orderId,t=n.orderInfo,r=n.returnUrl,c=n.returnUrl,h=n.amount,i="",g="payWithATM",d=!0,l="vi";return{success:!0,paymentUrl:`https://test-payment.momo.vn/v2/gateway/pay?t=${e}`,transactionId:e,message:"Tạo thanh toán MoMo thành công"}}catch(e){return console.error("MoMo payment error:",e),{success:!1,message:"Có lỗi xảy ra khi tạo thanh toán MoMo"}}}}class m{constructor(){o(this,"vnpayService",new y);o(this,"momoService",new v)}async processPayment(n){try{switch(n.paymentMethod){case"vnpay":return await this.vnpayService.createPaymentUrl(n);case"momo":return await this.momoService.createPayment(n);case"cod":return{success:!0,message:"Đơn hàng sẽ được thanh toán khi nhận hàng"};case"bank_transfer":return{success:!0,message:"Vui lòng chuyển khoản theo thông tin được cung cấp"};default:throw new Error("Phương thức thanh toán không được hỗ trợ")}}catch(e){return console.error("Payment processing error:",e),{success:!1,message:e instanceof Error?e.message:"Có lỗi xảy ra khi xử lý thanh toán"}}}async verifyPayment(n,e){switch(n){case"vnpay":return await this.vnpayService.verifyPayment(e);default:throw new Error("Phương thức thanh toán không hỗ trợ xác thực")}}async getPaymentStatus(n){try{return{orderId:n,status:"pending",amount:0,paymentMethod:"unknown"}}catch(e){throw console.error("Get payment status error:",e),new Error("Không thể lấy trạng thái thanh toán")}}async processRefund(n,e,s){try{const t=await this.getPaymentStatus(n);if(t.status!=="success")return{success:!1,message:"Chỉ có thể hoàn tiền cho đơn hàng đã thanh toán thành công"};if(e>t.amount)return{success:!1,message:"Số tiền hoàn không được vượt quá số tiền đã thanh toán"};switch(t.paymentMethod){case"vnpay":return await this.processVNPayRefund(n,e,s,t.transactionId);case"momo":return await this.processMoMoRefund(n,e,s,t.transactionId);case"cod":return{success:!0,message:"Yêu cầu hoàn tiền COD đã được ghi nhận. Nhân viên sẽ liên hệ để hoàn tiền trong 1-2 ngày làm việc."};case"bank_transfer":return{success:!0,message:"Yêu cầu hoàn tiền đã được ghi nhận. Tiền sẽ được chuyển về tài khoản của bạn trong 3-5 ngày làm việc."};default:return{success:!1,message:"Phương thức thanh toán không hỗ trợ hoàn tiền tự động"}}}catch(t){return console.error("Refund processing error:",t),{success:!1,message:"Có lỗi xảy ra khi xử lý hoàn tiền"}}}async processVNPayRefund(n,e,s,t){try{const r={vnp_RequestId:`${n}_refund_${Date.now()}`,vnp_Version:"2.1.0",vnp_Command:"refund",vnp_TmnCode:"DEMO",vnp_TransactionType:"02",vnp_TxnRef:n,vnp_Amount:(e*100).toString(),vnp_OrderInfo:`Hoàn tiền đơn hàng ${n}: ${s}`,vnp_TransactionNo:t,vnp_TransactionDate:new Date().toISOString().replace(/[-:]/g,"").split(".")[0],vnp_CreateBy:"system"};return console.log("VNPay refund request (demo):",r),{success:!0,transactionId:r.vnp_RequestId,message:"Yêu cầu hoàn tiền VNPay đã được gửi thành công. Tiền sẽ được hoàn về tài khoản trong 1-3 ngày làm việc."}}catch(r){return console.error("VNPay refund error:",r),{success:!1,message:"Có lỗi xảy ra khi xử lý hoàn tiền VNPay"}}}async processMoMoRefund(n,e,s,t){try{const r={partnerCode:"DEMO",orderId:n,requestId:`${n}_refund_${Date.now()}`,amount:e,transId:t,lang:"vi",description:`Hoàn tiền đơn hàng ${n}: ${s}`};return console.log("MoMo refund request (demo):",r),{success:!0,transactionId:r.requestId,message:"Yêu cầu hoàn tiền MoMo đã được gửi thành công. Tiền sẽ được hoàn về ví MoMo trong 1-3 ngày làm việc."}}catch(r){return console.error("MoMo refund error:",r),{success:!1,message:"Có lỗi xảy ra khi xử lý hoàn tiền MoMo"}}}}const M=new m;export{M as p};
//# sourceMappingURL=paymentService-C8Me4PBo.js.map
