{"version":3,"file":"paymentService-C8Me4PBo.js","sources":["../../src/services/paymentService.ts"],"sourcesContent":["/**\n * Service xử lý các phương thức thanh toán\n */\n\nexport interface PaymentRequest {\n  orderId: string;\n  amount: number;\n  orderInfo: string;\n  returnUrl: string;\n  cancelUrl: string;\n  paymentMethod: 'vnpay' | 'momo' | 'cod' | 'bank_transfer';\n}\n\nexport interface PaymentResponse {\n  success: boolean;\n  paymentUrl?: string;\n  transactionId?: string;\n  message: string;\n}\n\nexport interface PaymentStatus {\n  orderId: string;\n  status: 'pending' | 'success' | 'failed' | 'cancelled';\n  transactionId?: string;\n  amount: number;\n  paymentMethod: string;\n  paidAt?: string;\n}\n\n/**\n * Service xử lý thanh toán VNPay\n */\nclass VNPayService {\n  private readonly vnpUrl = 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html';\n  private readonly vnpTmnCode = import.meta.env.VITE_VNPAY_TMN_CODE || 'DEMO';\n  private readonly vnpHashSecret = import.meta.env.VITE_VNPAY_HASH_SECRET || 'DEMO';\n\n  /**\n   * Tạo URL thanh toán VNPay\n   */\n  async createPaymentUrl(request: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      // LƯU Ý: Trong thực tế, việc tạo URL thanh toán VNPay PHẢI được thực hiện ở backend\n      // để bảo mật thông tin nhạy cảm như vnp_HashSecret và tạo chữ ký an toàn\n      // Frontend chỉ nên gọi API backend để nhận URL thanh toán đã được tạo sẵn\n      \n      const vnpParams = {\n        vnp_Version: '2.1.0',\n        vnp_Command: 'pay',\n        vnp_TmnCode: this.vnpTmnCode,\n        vnp_Amount: (request.amount * 100).toString(), // VNPay yêu cầu amount * 100\n        vnp_CurrCode: 'VND',\n        vnp_TxnRef: request.orderId,\n        vnp_OrderInfo: request.orderInfo,\n        vnp_OrderType: 'other',\n        vnp_Locale: 'vn',\n        vnp_ReturnUrl: request.returnUrl,\n        vnp_IpAddr: '127.0.0.1',\n        vnp_CreateDate: new Date().toISOString().replace(/[-:]/g, '').split('.')[0]\n      };\n\n      // CẢNH BÁO: Đây chỉ là demo - KHÔNG BAO GIỠ tạo chữ ký ở frontend trong production\n      // const signature = this.createSignature(vnpParams); // Phải thực hiện ở backend\n      \n      // Tạm thời trả về URL demo cho mục đích phát triển\n      const paymentUrl = `${this.vnpUrl}?${new URLSearchParams(vnpParams).toString()}`;\n\n      return {\n        success: true,\n        paymentUrl,\n        transactionId: request.orderId,\n        message: 'Tạo URL thanh toán thành công'\n      };\n    } catch (error) {\n      console.error('VNPay payment error:', error);\n      return {\n        success: false,\n        message: 'Có lỗi xảy ra khi tạo URL thanh toán VNPay'\n      };\n    }\n  }\n\n  /**\n   * Xác thực kết quả thanh toán từ VNPay\n   */\n  async verifyPayment(params: URLSearchParams): Promise<PaymentStatus> {\n    try {\n      // LƯU Ý: Trong thực tế, việc xác thực chữ ký VNPay PHẢI được thực hiện ở backend\n      // để bảo mật vnp_HashSecret và đảm bảo tính toàn vẹn của dữ liệu\n      // Frontend chỉ nên gọi API backend để xác thực kết quả thanh toán\n      \n      const vnpResponseCode = params.get('vnp_ResponseCode');\n      const vnpTxnRef = params.get('vnp_TxnRef');\n      const vnpAmount = params.get('vnp_Amount');\n      const vnpTransactionNo = params.get('vnp_TransactionNo');\n      const vnpPayDate = params.get('vnp_PayDate');\n\n      // CẢNH BÁO: Đây chỉ là demo - KHÔNG BAO GIỜ xác thực chữ ký ở frontend trong production\n      // const isValidSignature = this.verifySignature(params); // Phải thực hiện ở backend\n      const isValidSignature = true; // NOTE: Cần triển khai xác thực chữ ký thực tế từ VNPay\n\n      if (!isValidSignature) {\n        return {\n          orderId: vnpTxnRef || '',\n          status: 'failed',\n          amount: parseInt(vnpAmount || '0') / 100,\n          paymentMethod: 'vnpay'\n        };\n      }\n\n      const status = vnpResponseCode === '00' ? 'success' : 'failed';\n\n      return {\n        orderId: vnpTxnRef || '',\n        status,\n        transactionId: vnpTransactionNo || undefined,\n        amount: parseInt(vnpAmount || '0') / 100,\n        paymentMethod: 'vnpay',\n        paidAt: vnpPayDate || undefined\n      };\n    } catch (error) {\n      console.error('VNPay verification error:', error);\n      throw new Error('Lỗi xác thực thanh toán VNPay');\n    }\n  }\n}\n\n/**\n * Service xử lý thanh toán MoMo\n */\nclass MoMoService {\n  private readonly momoEndpoint = 'https://test-payment.momo.vn/v2/gateway/api/create';\n  private readonly partnerCode = import.meta.env.VITE_MOMO_PARTNER_CODE || 'DEMO';\n  private readonly accessKey = import.meta.env.VITE_MOMO_ACCESS_KEY || 'DEMO';\n  private readonly secretKey = import.meta.env.VITE_MOMO_SECRET_KEY || 'DEMO';\n\n  /**\n   * Tạo thanh toán MoMo\n   */\n  async createPayment(request: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      // LƯU Ý: Trong thực tế, việc tạo thanh toán MoMo PHẢI được thực hiện ở backend\n      // để bảo mật thông tin nhạy cảm như secretKey và tạo chữ ký HMAC SHA256 an toàn\n      // Frontend chỉ nên gọi API backend để nhận URL thanh toán đã được tạo sẵn\n      \n      const requestId = `${request.orderId}_${Date.now()}`;\n      const orderId = request.orderId;\n      const orderInfo = request.orderInfo;\n      const redirectUrl = request.returnUrl;\n      const ipnUrl = request.returnUrl; // Trong thực tế sẽ là URL webhook\n      const amount = request.amount;\n      const extraData = '';\n      const requestType = 'payWithATM';\n      const autoCapture = true;\n      const lang = 'vi';\n\n      // CẢNH BÁO: Đây chỉ là demo - KHÔNG BAO GIỜ tạo chữ ký HMAC ở frontend trong production\n      // const signature = crypto.createHmac('sha256', this.secretKey).update(rawSignature).digest('hex'); // Phải thực hiện ở backend\n      \n      // Tạm thời mô phỏng kết quả cho mục đích phát triển\n      const payUrl = `https://test-payment.momo.vn/v2/gateway/pay?t=${requestId}`;\n\n      return {\n        success: true,\n        paymentUrl: payUrl,\n        transactionId: requestId,\n        message: 'Tạo thanh toán MoMo thành công'\n      };\n    } catch (error) {\n      console.error('MoMo payment error:', error);\n      return {\n        success: false,\n        message: 'Có lỗi xảy ra khi tạo thanh toán MoMo'\n      };\n    }\n  }\n}\n\n/**\n * Service chính xử lý thanh toán\n */\nclass PaymentService {\n  private vnpayService = new VNPayService();\n  private momoService = new MoMoService();\n\n  /**\n   * Xử lý thanh toán theo phương thức được chọn\n   */\n  async processPayment(request: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      switch (request.paymentMethod) {\n        case 'vnpay':\n          return await this.vnpayService.createPaymentUrl(request);\n        \n        case 'momo':\n          return await this.momoService.createPayment(request);\n        \n        case 'cod':\n          // Cash on Delivery - không cần xử lý thanh toán online\n          return {\n            success: true,\n            message: 'Đơn hàng sẽ được thanh toán khi nhận hàng'\n          };\n        \n        case 'bank_transfer':\n          // Chuyển khoản ngân hàng - hiển thị thông tin tài khoản\n          return {\n            success: true,\n            message: 'Vui lòng chuyển khoản theo thông tin được cung cấp'\n          };\n        \n        default:\n          throw new Error('Phương thức thanh toán không được hỗ trợ');\n      }\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Có lỗi xảy ra khi xử lý thanh toán'\n      };\n    }\n  }\n\n  /**\n   * Xác thực kết quả thanh toán\n   */\n  async verifyPayment(paymentMethod: string, params: URLSearchParams): Promise<PaymentStatus> {\n    switch (paymentMethod) {\n      case 'vnpay':\n        return await this.vnpayService.verifyPayment(params);\n      \n      default:\n        throw new Error('Phương thức thanh toán không hỗ trợ xác thực');\n    }\n  }\n\n  /**\n   * Lấy trạng thái thanh toán\n   */\n  async getPaymentStatus(orderId: string): Promise<PaymentStatus> {\n    try {\n      // LƯU Ý: Trong thực tế, cần gọi API backend để lấy trạng thái thanh toán từ database\n      // API backend sẽ truy vấn database và trả về thông tin chính xác về trạng thái đơn hàng\n      // Ví dụ: GET /api/payments/status/${orderId}\n      \n      // Tạm thời trả về dữ liệu mẫu cho mục đích phát triển\n      return {\n        orderId,\n        status: 'pending',\n        amount: 0,\n        paymentMethod: 'unknown'\n      };\n    } catch (error) {\n      console.error('Get payment status error:', error);\n      throw new Error('Không thể lấy trạng thái thanh toán');\n    }\n  }\n\n  /**\n   * Xử lý hoàn tiền\n   */\n  async processRefund(orderId: string, amount: number, reason: string): Promise<PaymentResponse> {\n    try {\n      // Lấy thông tin đơn hàng để xác định phương thức thanh toán\n      const paymentStatus = await this.getPaymentStatus(orderId);\n      \n      if (paymentStatus.status !== 'success') {\n        return {\n          success: false,\n          message: 'Chỉ có thể hoàn tiền cho đơn hàng đã thanh toán thành công'\n        };\n      }\n\n      if (amount > paymentStatus.amount) {\n        return {\n          success: false,\n          message: 'Số tiền hoàn không được vượt quá số tiền đã thanh toán'\n        };\n      }\n\n      switch (paymentStatus.paymentMethod) {\n        case 'vnpay':\n          return await this.processVNPayRefund(orderId, amount, reason, paymentStatus.transactionId);\n        \n        case 'momo':\n          return await this.processMoMoRefund(orderId, amount, reason, paymentStatus.transactionId);\n        \n        case 'cod':\n          // COD - hoàn tiền bằng tiền mặt\n          return {\n            success: true,\n            message: 'Yêu cầu hoàn tiền COD đã được ghi nhận. Nhân viên sẽ liên hệ để hoàn tiền trong 1-2 ngày làm việc.'\n          };\n        \n        case 'bank_transfer':\n          // Chuyển khoản ngân hàng - hoàn tiền qua chuyển khoản\n          return {\n            success: true,\n            message: 'Yêu cầu hoàn tiền đã được ghi nhận. Tiền sẽ được chuyển về tài khoản của bạn trong 3-5 ngày làm việc.'\n          };\n        \n        default:\n          return {\n            success: false,\n            message: 'Phương thức thanh toán không hỗ trợ hoàn tiền tự động'\n          };\n      }\n    } catch (error) {\n      console.error('Refund processing error:', error);\n      return {\n        success: false,\n        message: 'Có lỗi xảy ra khi xử lý hoàn tiền'\n      };\n    }\n  }\n\n  /**\n   * Xử lý hoàn tiền VNPay\n   */\n  private async processVNPayRefund(orderId: string, amount: number, reason: string, transactionId?: string): Promise<PaymentResponse> {\n    try {\n      // LƯU Ý: Trong thực tế, việc xử lý hoàn tiền VNPay PHẢI được thực hiện ở backend\n      // để bảo mật thông tin nhạy cảm và tạo chữ ký an toàn cho API VNPay\n      // VNPay hỗ trợ hoàn tiền một phần hoặc toàn bộ thông qua API refund\n      \n      const refundData = {\n        vnp_RequestId: `${orderId}_refund_${Date.now()}`,\n        vnp_Version: '2.1.0',\n        vnp_Command: 'refund',\n        vnp_TmnCode: import.meta.env.VITE_VNPAY_TMN_CODE || 'DEMO',\n        vnp_TransactionType: '02', // Hoàn tiền một phần\n        vnp_TxnRef: orderId,\n        vnp_Amount: (amount * 100).toString(),\n        vnp_OrderInfo: `Hoàn tiền đơn hàng ${orderId}: ${reason}`,\n        vnp_TransactionNo: transactionId,\n        vnp_TransactionDate: new Date().toISOString().replace(/[-:]/g, '').split('.')[0],\n        vnp_CreateBy: 'system'\n      };\n\n      // CẢNH BÁO: Đây chỉ là demo - Trong production cần gọi API backend\n      // Backend sẽ tạo chữ ký và gọi API VNPay refund\n      console.log('VNPay refund request (demo):', refundData);\n      \n      return {\n        success: true,\n        transactionId: refundData.vnp_RequestId,\n        message: 'Yêu cầu hoàn tiền VNPay đã được gửi thành công. Tiền sẽ được hoàn về tài khoản trong 1-3 ngày làm việc.'\n      };\n    } catch (error) {\n      console.error('VNPay refund error:', error);\n      return {\n        success: false,\n        message: 'Có lỗi xảy ra khi xử lý hoàn tiền VNPay'\n      };\n    }\n  }\n\n  /**\n   * Xử lý hoàn tiền MoMo\n   */\n  private async processMoMoRefund(orderId: string, amount: number, reason: string, transactionId?: string): Promise<PaymentResponse> {\n    try {\n      // LƯU Ý: Trong thực tế, việc xử lý hoàn tiền MoMo PHẢI được thực hiện ở backend\n      // để bảo mật thông tin nhạy cảm và tạo chữ ký HMAC SHA256 an toàn cho API MoMo\n      \n      const refundData = {\n        partnerCode: import.meta.env.VITE_MOMO_PARTNER_CODE || 'DEMO',\n        orderId: orderId,\n        requestId: `${orderId}_refund_${Date.now()}`,\n        amount: amount,\n        transId: transactionId,\n        lang: 'vi',\n        description: `Hoàn tiền đơn hàng ${orderId}: ${reason}`\n      };\n\n      // CẢNH BÁO: Đây chỉ là demo - Trong production cần gọi API backend\n      // Backend sẽ tạo chữ ký HMAC và gọi API MoMo refund\n      console.log('MoMo refund request (demo):', refundData);\n      \n      return {\n        success: true,\n        transactionId: refundData.requestId,\n        message: 'Yêu cầu hoàn tiền MoMo đã được gửi thành công. Tiền sẽ được hoàn về ví MoMo trong 1-3 ngày làm việc.'\n      };\n    } catch (error) {\n      console.error('MoMo refund error:', error);\n      return {\n        success: false,\n        message: 'Có lỗi xảy ra khi xử lý hoàn tiền MoMo'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const paymentService = new PaymentService();\nexport default paymentService;"],"names":["VNPayService","__publicField","request","vnpParams","error","params","vnpResponseCode","vnpTxnRef","vnpAmount","vnpTransactionNo","vnpPayDate","isValidSignature","MoMoService","requestId","orderId","orderInfo","redirectUrl","ipnUrl","amount","extraData","requestType","autoCapture","lang","PaymentService","paymentMethod","reason","paymentStatus","transactionId","refundData","paymentService"],"mappings":"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"}