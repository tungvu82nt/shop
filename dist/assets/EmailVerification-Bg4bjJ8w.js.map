{"version":3,"file":"EmailVerification-Bg4bjJ8w.js","sources":["../../src/services/emailService.ts","../../src/pages/EmailVerification.tsx"],"sourcesContent":["import { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\n\n/**\n * Email Service - Quản lý gửi email và xác thực email\n */\nexport class EmailService {\n  /**\n   * Gửi email xác thực đến người dùng\n   */\n  static async sendVerificationEmail(email: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.auth.resend({\n        type: 'signup',\n        email: email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/verify-email`\n        }\n      });\n\n      if (error) {\n        console.error('Lỗi gửi email xác thực:', error);\n        toast.error('Không thể gửi email xác thực. Vui lòng thử lại.');\n        return false;\n      }\n\n      toast.success('Email xác thực đã được gửi. Vui lòng kiểm tra hộp thư.');\n      return true;\n    } catch (error) {\n      console.error('Lỗi gửi email xác thực:', error);\n      toast.error('Có lỗi xảy ra khi gửi email xác thực.');\n      return false;\n    }\n  }\n\n  /**\n   * Xác thực email với token\n   */\n  static async verifyEmail(token: string, email: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.auth.verifyOtp({\n        token_hash: token,\n        type: 'email',\n        email: email\n      });\n\n      if (error) {\n        console.error('Lỗi xác thực email:', error);\n        toast.error('Token xác thực không hợp lệ hoặc đã hết hạn.');\n        return false;\n      }\n\n      toast.success('Email đã được xác thực thành công!');\n      return true;\n    } catch (error) {\n      console.error('Lỗi xác thực email:', error);\n      toast.error('Có lỗi xảy ra khi xác thực email.');\n      return false;\n    }\n  }\n\n  /**\n   * Gửi email reset password\n   */\n  static async sendPasswordResetEmail(email: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`\n      });\n\n      if (error) {\n        console.error('Lỗi gửi email reset password:', error);\n        toast.error('Không thể gửi email reset password. Vui lòng thử lại.');\n        return false;\n      }\n\n      toast.success('Email reset password đã được gửi. Vui lòng kiểm tra hộp thư.');\n      return true;\n    } catch (error) {\n      console.error('Lỗi gửi email reset password:', error);\n      toast.error('Có lỗi xảy ra khi gửi email reset password.');\n      return false;\n    }\n  }\n\n  /**\n   * Gửi email thông báo đơn hàng\n   */\n  static async sendOrderConfirmationEmail(\n    email: string, \n    orderData: {\n      orderId: string;\n      customerName: string;\n      totalAmount: number;\n      items: Array<{\n        name: string;\n        quantity: number;\n        price: number;\n      }>;\n    }\n  ): Promise<boolean> {\n    try {\n      // Trong production, sẽ tích hợp với email service như SendGrid, Mailgun\n      // Hiện tại chỉ log để demo\n      console.log('Gửi email xác nhận đơn hàng:', {\n        to: email,\n        subject: `Xác nhận đơn hàng #${orderData.orderId}`,\n        orderData\n      });\n\n      // Simulate email sending\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast.success('Email xác nhận đơn hàng đã được gửi.');\n      return true;\n    } catch (error) {\n      console.error('Lỗi gửi email xác nhận đơn hàng:', error);\n      toast.error('Có lỗi xảy ra khi gửi email xác nhận đơn hàng.');\n      return false;\n    }\n  }\n\n  /**\n   * Gửi email thông báo trạng thái đơn hàng\n   */\n  static async sendOrderStatusEmail(\n    email: string,\n    orderData: {\n      orderId: string;\n      customerName: string;\n      status: string;\n      trackingNumber?: string;\n    }\n  ): Promise<boolean> {\n    try {\n      // Trong production, sẽ tích hợp với email service\n      console.log('Gửi email cập nhật trạng thái đơn hàng:', {\n        to: email,\n        subject: `Cập nhật đơn hàng #${orderData.orderId}`,\n        orderData\n      });\n\n      // Simulate email sending\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast.success('Email cập nhật trạng thái đã được gửi.');\n      return true;\n    } catch (error) {\n      console.error('Lỗi gửi email cập nhật trạng thái:', error);\n      toast.error('Có lỗi xảy ra khi gửi email cập nhật trạng thái.');\n      return false;\n    }\n  }\n\n  /**\n   * Kiểm tra trạng thái email verification của user\n   */\n  static async checkEmailVerificationStatus(): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        return false;\n      }\n\n      return user.email_confirmed_at !== null;\n    } catch (error) {\n      console.error('Lỗi kiểm tra trạng thái email verification:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Email Templates - Các template email chuẩn\n */\nexport const EmailTemplates = {\n  orderConfirmation: (orderData: any) => `\n    <h2>Xác nhận đơn hàng #${orderData.orderId}</h2>\n    <p>Xin chào ${orderData.customerName},</p>\n    <p>Cảm ơn bạn đã đặt hàng tại Yapee Vietnam!</p>\n    <h3>Chi tiết đơn hàng:</h3>\n    <ul>\n      ${orderData.items.map((item: any) => `\n        <li>${item.name} - Số lượng: ${item.quantity} - Giá: ${item.price.toLocaleString('vi-VN')}đ</li>\n      `).join('')}\n    </ul>\n    <p><strong>Tổng tiền: ${orderData.totalAmount.toLocaleString('vi-VN')}đ</strong></p>\n    <p>Chúng tôi sẽ xử lý đơn hàng và giao hàng trong thời gian sớm nhất.</p>\n  `,\n  \n  orderStatusUpdate: (orderData: any) => `\n    <h2>Cập nhật đơn hàng #${orderData.orderId}</h2>\n    <p>Xin chào ${orderData.customerName},</p>\n    <p>Đơn hàng của bạn đã được cập nhật trạng thái: <strong>${orderData.status}</strong></p>\n    ${orderData.trackingNumber ? `<p>Mã vận đơn: <strong>${orderData.trackingNumber}</strong></p>` : ''}\n    <p>Cảm ơn bạn đã mua sắm tại Yapee Vietnam!</p>\n  `,\n  \n  welcomeEmail: (userData: any) => `\n    <h2>Chào mừng đến với Yapee Vietnam!</h2>\n    <p>Xin chào ${userData.fullName},</p>\n    <p>Cảm ơn bạn đã đăng ký tài khoản tại Yapee Vietnam.</p>\n    <p>Hãy khám phá hàng triệu sản phẩm chất lượng với giá tốt nhất!</p>\n    <p>Chúc bạn có những trải nghiệm mua sắm tuyệt vời!</p>\n  `\n};","import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { CheckCircle, XCircle, Mail, ArrowLeft, RefreshCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { EmailService } from '@/services/emailService';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { toast } from 'sonner';\n\n/**\n * Trang xác thực email\n */\nconst EmailVerification: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { user, refreshUser } = useAuth();\n  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error' | 'pending'>('loading');\n  const [isResending, setIsResending] = useState(false);\n\n  const token = searchParams.get('token');\n  const email = searchParams.get('email') || user?.email;\n\n  useEffect(() => {\n    const verifyEmail = async () => {\n      if (token && email) {\n        // Có token từ email link - thực hiện xác thực\n        const success = await EmailService.verifyEmail(token, email);\n        if (success) {\n          setVerificationStatus('success');\n          // Refresh user data để cập nhật trạng thái email_verified\n          await refreshUser();\n          // Redirect về trang chủ sau 3 giây\n          setTimeout(() => {\n            navigate('/', { replace: true });\n          }, 3000);\n        } else {\n          setVerificationStatus('error');\n        }\n      } else if (user) {\n        // Kiểm tra trạng thái email verification hiện tại\n        const isVerified = await EmailService.checkEmailVerificationStatus();\n        if (isVerified) {\n          setVerificationStatus('success');\n          setTimeout(() => {\n            navigate('/', { replace: true });\n          }, 2000);\n        } else {\n          setVerificationStatus('pending');\n        }\n      } else {\n        // Chưa đăng nhập\n        navigate('/auth/login', { replace: true });\n      }\n    };\n\n    verifyEmail();\n  }, [token, email, user, navigate, refreshUser]);\n\n  const handleResendEmail = async () => {\n    if (!email) {\n      toast.error('Không tìm thấy email để gửi lại.');\n      return;\n    }\n\n    setIsResending(true);\n    const success = await EmailService.sendVerificationEmail(email);\n    setIsResending(false);\n\n    if (success) {\n      toast.success('Email xác thực đã được gửi lại!');\n    }\n  };\n\n  const handleBackToHome = () => {\n    navigate('/', { replace: true });\n  };\n\n  const renderContent = () => {\n    switch (verificationStatus) {\n      case 'loading':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n                <RefreshCw className=\"w-8 h-8 text-blue-600 animate-spin\" />\n              </div>\n              <CardTitle>Đang xác thực email...</CardTitle>\n              <CardDescription>\n                Vui lòng chờ trong giây lát\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        );\n\n      case 'success':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-green-600\">Xác thực thành công!</CardTitle>\n              <CardDescription>\n                Email của bạn đã được xác thực thành công. Bạn sẽ được chuyển về trang chủ trong giây lát.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <Button onClick={handleBackToHome} className=\"w-full\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Về trang chủ\n              </Button>\n            </CardContent>\n          </Card>\n        );\n\n      case 'error':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n                <XCircle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-red-600\">Xác thực thất bại</CardTitle>\n              <CardDescription>\n                Link xác thực không hợp lệ hoặc đã hết hạn.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Mail className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Vui lòng kiểm tra lại email hoặc yêu cầu gửi lại email xác thực.\n                </AlertDescription>\n              </Alert>\n              <div className=\"space-y-2\">\n                <Button \n                  onClick={handleResendEmail} \n                  disabled={isResending}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  {isResending ? (\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Gửi lại email xác thực\n                </Button>\n                <Button onClick={handleBackToHome} className=\"w-full\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Về trang chủ\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'pending':\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <Mail className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <CardTitle className=\"text-yellow-600\">Chờ xác thực email</CardTitle>\n              <CardDescription>\n                Chúng tôi đã gửi email xác thực đến <strong>{email}</strong>\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Mail className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Vui lòng kiểm tra hộp thư (bao gồm cả thư mục spam) và nhấp vào link xác thực.\n                </AlertDescription>\n              </Alert>\n              <div className=\"space-y-2\">\n                <Button \n                  onClick={handleResendEmail} \n                  disabled={isResending}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  {isResending ? (\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Gửi lại email xác thực\n                </Button>\n                <Button onClick={handleBackToHome} className=\"w-full\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Về trang chủ\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default EmailVerification;"],"names":["EmailService","email","error","supabase","toast","token","orderData","resolve","user","EmailVerification","searchParams","useSearchParams","navigate","useNavigate","refreshUser","useAuth","verificationStatus","setVerificationStatus","useState","isResending","setIsResending","useEffect","handleResendEmail","success","handleBackToHome","renderContent","Card","jsxs","CardHeader","jsx","RefreshCw","CardTitle","CardDescription","CheckCircle","CardContent","Button","ArrowLeft","XCircle","Alert","Mail","AlertDescription"],"mappings":"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"}