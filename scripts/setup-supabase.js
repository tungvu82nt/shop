#!/usr/bin/env node

/**
 * YAPEE VIETNAM CLONE - SUPABASE SETUP SCRIPT
 * 
 * Script n√†y s·∫Ω h∆∞·ªõng d·∫´n setup Supabase project v√† c·∫•u h√¨nh database
 * 
 * Ch·∫°y: npm run setup:supabase
 */

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupSupabase() {
  console.log('üöÄ YAPEE VIETNAM CLONE - SUPABASE SETUP');
  console.log('=====================================\n');
  
  console.log('üìã B∆∞·ªõc 1: T·∫°o Supabase Project');
  console.log('1. Truy c·∫≠p https://supabase.com/dashboard');
  console.log('2. ƒêƒÉng nh·∫≠p ho·∫∑c t·∫°o t√†i kho·∫£n');
  console.log('3. Nh·∫•n "New Project"');
  console.log('4. Ch·ªçn Organization v√† nh·∫≠p th√¥ng tin:');
  console.log('   - Name: yapee-vietnam-clone');
  console.log('   - Database Password: [t·∫°o password m·∫°nh]');
  console.log('   - Region: Southeast Asia (Singapore)');
  console.log('5. Nh·∫•n "Create new project"\n');
  
  await question('Nh·∫•n Enter khi ƒë√£ t·∫°o xong project...');
  
  console.log('\nüìã B∆∞·ªõc 2: L·∫•y Project Credentials');
  console.log('1. Trong Supabase Dashboard, v√†o Settings > API');
  console.log('2. Copy c√°c th√¥ng tin sau:\n');
  
  const projectUrl = await question('Nh·∫≠p Project URL (https://xxx.supabase.co): ');
  const anonKey = await question('Nh·∫≠p anon/public key: ');
  
  // Validate inputs
  if (!projectUrl.includes('supabase.co') || !anonKey.startsWith('eyJ')) {
    console.log('‚ùå Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
    process.exit(1);
  }
  
  // Update .env file
  const envPath = path.join(process.cwd(), '.env');
  let envContent = '';
  
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
  }
  
  // Replace or add Supabase config
  envContent = envContent.replace(
    /VITE_SUPABASE_URL=.*/,
    `VITE_SUPABASE_URL=${projectUrl}`
  );
  
  envContent = envContent.replace(
    /VITE_SUPABASE_ANON_KEY=.*/,
    `VITE_SUPABASE_ANON_KEY=${anonKey}`
  );
  
  // If not found, add them
  if (!envContent.includes('VITE_SUPABASE_URL')) {
    envContent += `\nVITE_SUPABASE_URL=${projectUrl}`;
  }
  if (!envContent.includes('VITE_SUPABASE_ANON_KEY')) {
    envContent += `\nVITE_SUPABASE_ANON_KEY=${anonKey}`;
  }
  
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t file .env');
  
  console.log('\nüìã B∆∞·ªõc 3: Setup Database Schema');
  console.log('1. Trong Supabase Dashboard, v√†o SQL Editor');
  console.log('2. T·∫°o new query v√† copy n·ªôi dung t·ª´ file:');
  console.log('   - database/schema.sql');
  console.log('   - database/rls-policies.sql');
  console.log('3. Ch·∫°y t·ª´ng file theo th·ª© t·ª±\n');
  
  await question('Nh·∫•n Enter khi ƒë√£ setup xong database schema...');
  
  console.log('\nüìã B∆∞·ªõc 4: Seed Data (Optional)');
  console.log('N·∫øu mu·ªën c√≥ d·ªØ li·ªáu m·∫´u:');
  console.log('1. Copy n·ªôi dung t·ª´ database/seed-data.sql');
  console.log('2. Ch·∫°y trong SQL Editor\n');
  
  const seedData = await question('C√≥ mu·ªën seed data kh√¥ng? (y/n): ');
  
  if (seedData.toLowerCase() === 'y') {
    console.log('‚úÖ H√£y ch·∫°y file database/seed-data.sql trong SQL Editor');
  }
  
  console.log('\nüéâ SETUP HO√ÄN TH√ÄNH!');
  console.log('=====================================');
  console.log('‚úÖ Supabase project ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
  console.log('‚úÖ Database schema ƒë√£ ƒë∆∞·ª£c t·∫°o');
  console.log('‚úÖ RLS policies ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng');
  console.log('\nüöÄ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y: npm run dev');
  console.log('\nüìö T√†i li·ªáu:');
  console.log('- Supabase Docs: https://supabase.com/docs');
  console.log('- Project README: ./README.md');
  
  rl.close();
}

setupSupabase().catch(console.error);