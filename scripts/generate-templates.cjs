#!/usr/bin/env node

/**
 * SHOPY VIETNAM - Template Generator Script
 * T·ª± ƒë·ªông t·∫°o c√°c file template c·∫ßn thi·∫øt cho d·ª± √°n
 */

const fs = require('fs');
const path = require('path');

// M√†u s·∫Øc cho console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}‚Ñπ ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  header: (msg) => console.log(`${colors.cyan}${colors.bright}\nüöÄ ${msg}${colors.reset}`)
};

// Template cho Database RLS Policies
const rlsPoliciesTemplate = `-- SHOPY VIETNAM - Row Level Security Policies
-- T·∫°o c√°c ch√≠nh s√°ch b·∫£o m·∫≠t c·∫•p h√†ng cho database

-- Enable RLS cho t·∫•t c·∫£ tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE addresses ENABLE ROW LEVEL SECURITY;

-- USERS TABLE POLICIES
-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ xem v√† c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh h·ªç
CREATE POLICY "Users can view own profile" ON users
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Enable insert for authenticated users only" ON users
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Admin c√≥ th·ªÉ xem t·∫•t c·∫£ users
CREATE POLICY "Admins can view all users" ON users
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- PRODUCTS TABLE POLICIES
-- T·∫•t c·∫£ c√≥ th·ªÉ xem products (public read)
CREATE POLICY "Anyone can view products" ON products
  FOR SELECT USING (true);

-- Ch·ªâ admin c√≥ th·ªÉ th√™m/s·ª≠a/x√≥a products
CREATE POLICY "Only admins can insert products" ON products
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

CREATE POLICY "Only admins can update products" ON products
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

CREATE POLICY "Only admins can delete products" ON products
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- ORDERS TABLE POLICIES
-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ xem orders c·ªßa ch√≠nh h·ªç
CREATE POLICY "Users can view own orders" ON orders
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can create own orders" ON orders
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own orders" ON orders
  FOR UPDATE USING (user_id = auth.uid());

-- Admin c√≥ th·ªÉ xem t·∫•t c·∫£ orders
CREATE POLICY "Admins can view all orders" ON orders
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- ORDER_ITEMS TABLE POLICIES
-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ xem order_items c·ªßa orders thu·ªôc v·ªÅ h·ªç
CREATE POLICY "Users can view own order items" ON order_items
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM orders 
      WHERE orders.id = order_items.order_id 
      AND orders.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert own order items" ON order_items
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM orders 
      WHERE orders.id = order_items.order_id 
      AND orders.user_id = auth.uid()
    )
  );

-- Admin c√≥ th·ªÉ xem t·∫•t c·∫£ order_items
CREATE POLICY "Admins can manage all order items" ON order_items
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- CART_ITEMS TABLE POLICIES
-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ qu·∫£n l√Ω cart c·ªßa ch√≠nh h·ªç
CREATE POLICY "Users can manage own cart" ON cart_items
  FOR ALL USING (user_id = auth.uid());

-- REVIEWS TABLE POLICIES
-- T·∫•t c·∫£ c√≥ th·ªÉ xem reviews
CREATE POLICY "Anyone can view reviews" ON reviews
  FOR SELECT USING (true);

-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ t·∫°o/s·ª≠a/x√≥a reviews c·ªßa ch√≠nh h·ªç
CREATE POLICY "Users can manage own reviews" ON reviews
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own reviews" ON reviews
  FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "Users can delete own reviews" ON reviews
  FOR DELETE USING (user_id = auth.uid());

-- Admin c√≥ th·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ reviews
CREATE POLICY "Admins can manage all reviews" ON reviews
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- ADDRESSES TABLE POLICIES
-- Ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ qu·∫£n l√Ω addresses c·ªßa ch√≠nh h·ªç
CREATE POLICY "Users can manage own addresses" ON addresses
  FOR ALL USING (user_id = auth.uid());

-- Admin c√≥ th·ªÉ xem t·∫•t c·∫£ addresses
CREATE POLICY "Admins can view all addresses" ON addresses
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );
`;

// Template cho Database Functions
const functionsTemplate = `-- SHOPY VIETNAM - Database Functions
-- C√°c h√†m v√† trigger c·∫ßn thi·∫øt cho database

-- Function ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- T·∫°o triggers cho t·∫•t c·∫£ tables c√≥ updated_at column
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_addresses_updated_at BEFORE UPDATE ON addresses
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function ƒë·ªÉ qu·∫£n l√Ω inventory khi c√≥ order m·ªõi
CREATE OR REPLACE FUNCTION handle_order_inventory()
RETURNS TRIGGER AS $$
BEGIN
    -- Gi·∫£m stock khi order ƒë∆∞·ª£c confirmed
    IF NEW.status = 'confirmed' AND OLD.status != 'confirmed' THEN
        UPDATE products 
        SET stock = stock - (
            SELECT SUM(quantity) 
            FROM order_items 
            WHERE order_id = NEW.id AND product_id = products.id
        )
        WHERE id IN (
            SELECT product_id 
            FROM order_items 
            WHERE order_id = NEW.id
        );
    END IF;
    
    -- Ho√†n l·∫°i stock khi order b·ªã cancelled
    IF NEW.status = 'cancelled' AND OLD.status != 'cancelled' THEN
        UPDATE products 
        SET stock = stock + (
            SELECT SUM(quantity) 
            FROM order_items 
            WHERE order_id = NEW.id AND product_id = products.id
        )
        WHERE id IN (
            SELECT product_id 
            FROM order_items 
            WHERE order_id = NEW.id
        );
    END IF;
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger cho inventory management
CREATE TRIGGER handle_order_inventory_trigger
    BEFORE UPDATE ON orders
    FOR EACH ROW
    EXECUTE FUNCTION handle_order_inventory();

-- Function ƒë·ªÉ validate order status transitions
CREATE OR REPLACE FUNCTION validate_order_status()
RETURNS TRIGGER AS $$
BEGIN
    -- Ki·ªÉm tra c√°c transition h·ª£p l·ªá
    IF OLD.status = 'cancelled' OR OLD.status = 'delivered' THEN
        RAISE EXCEPTION 'Cannot change status from % to %', OLD.status, NEW.status;
    END IF;
    
    -- Ki·ªÉm tra stock tr∆∞·ªõc khi confirm order
    IF NEW.status = 'confirmed' AND OLD.status != 'confirmed' THEN
        IF EXISTS (
            SELECT 1 
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            WHERE oi.order_id = NEW.id AND p.stock < oi.quantity
        ) THEN
            RAISE EXCEPTION 'Insufficient stock for some products in order';
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger cho order status validation
CREATE TRIGGER validate_order_status_trigger
    BEFORE UPDATE ON orders
    FOR EACH ROW
    EXECUTE FUNCTION validate_order_status();

-- Function ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã order
CREATE OR REPLACE FUNCTION calculate_order_total(order_id_param UUID)
RETURNS DECIMAL AS $$
DECLARE
    total_amount DECIMAL := 0;
BEGIN
    SELECT COALESCE(SUM(oi.quantity * oi.price), 0)
    INTO total_amount
    FROM order_items oi
    WHERE oi.order_id = order_id_param;
    
    RETURN total_amount;
END;
$$ language 'plpgsql';

-- Function ƒë·ªÉ c·∫≠p nh·∫≠t order total khi order_items thay ƒë·ªïi
CREATE OR REPLACE FUNCTION update_order_total()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE orders 
    SET total_amount = calculate_order_total(
        CASE 
            WHEN TG_OP = 'DELETE' THEN OLD.order_id
            ELSE NEW.order_id
        END
    )
    WHERE id = (
        CASE 
            WHEN TG_OP = 'DELETE' THEN OLD.order_id
            ELSE NEW.order_id
        END
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$ language 'plpgsql';

-- Triggers cho order total calculation
CREATE TRIGGER update_order_total_on_insert
    AFTER INSERT ON order_items
    FOR EACH ROW
    EXECUTE FUNCTION update_order_total();

CREATE TRIGGER update_order_total_on_update
    AFTER UPDATE ON order_items
    FOR EACH ROW
    EXECUTE FUNCTION update_order_total();

CREATE TRIGGER update_order_total_on_delete
    AFTER DELETE ON order_items
    FOR EACH ROW
    EXECUTE FUNCTION update_order_total();

-- Function ƒë·ªÉ t·∫°o order number t·ª± ƒë·ªông
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS TRIGGER AS $$
BEGIN
    NEW.order_number = 'SV' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || 
                       LPAD(NEXTVAL('order_number_seq')::TEXT, 4, '0');
    RETURN NEW;
END;
$$ language 'plpgsql';

-- T·∫°o sequence cho order number
CREATE SEQUENCE IF NOT EXISTS order_number_seq START 1;

-- Trigger cho order number generation
CREATE TRIGGER generate_order_number_trigger
    BEFORE INSERT ON orders
    FOR EACH ROW
    EXECUTE FUNCTION generate_order_number();
`;

// Template cho Database Indexes
const indexesTemplate = `-- SHOPY VIETNAM - Database Indexes
-- T·ªëi ∆∞u h√≥a performance cho c√°c query th∆∞·ªùng d√πng

-- USERS TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

-- PRODUCTS TABLE INDEXES
-- Index cho search functionality
CREATE INDEX IF NOT EXISTS idx_products_name_search ON products USING gin(to_tsvector('english', name));
CREATE INDEX IF NOT EXISTS idx_products_description_search ON products USING gin(to_tsvector('english', description));
CREATE INDEX IF NOT EXISTS idx_products_name_trigram ON products USING gin(name gin_trgm_ops);

-- Index cho filtering v√† sorting
CREATE INDEX IF NOT EXISTS idx_products_category_id ON products(category_id);
CREATE INDEX IF NOT EXISTS idx_products_price ON products(price);
CREATE INDEX IF NOT EXISTS idx_products_stock ON products(stock);
CREATE INDEX IF NOT EXISTS idx_products_rating ON products(average_rating);
CREATE INDEX IF NOT EXISTS idx_products_created_at ON products(created_at);
CREATE INDEX IF NOT EXISTS idx_products_is_active ON products(is_active);

-- Composite indexes cho common queries
CREATE INDEX IF NOT EXISTS idx_products_category_price ON products(category_id, price);
CREATE INDEX IF NOT EXISTS idx_products_active_category ON products(is_active, category_id);
CREATE INDEX IF NOT EXISTS idx_products_active_stock ON products(is_active, stock) WHERE stock > 0;

-- ORDERS TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at);
CREATE INDEX IF NOT EXISTS idx_orders_order_number ON orders(order_number);

-- Composite indexes cho admin dashboard
CREATE INDEX IF NOT EXISTS idx_orders_user_status ON orders(user_id, status);
CREATE INDEX IF NOT EXISTS idx_orders_status_created ON orders(status, created_at);
CREATE INDEX IF NOT EXISTS idx_orders_user_created ON orders(user_id, created_at);

-- ORDER_ITEMS TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);
CREATE INDEX IF NOT EXISTS idx_order_items_product_id ON order_items(product_id);
CREATE INDEX IF NOT EXISTS idx_order_items_order_product ON order_items(order_id, product_id);

-- CART_ITEMS TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_cart_items_user_id ON cart_items(user_id);
CREATE INDEX IF NOT EXISTS idx_cart_items_product_id ON cart_items(product_id);
CREATE INDEX IF NOT EXISTS idx_cart_items_user_product ON cart_items(user_id, product_id);
CREATE INDEX IF NOT EXISTS idx_cart_items_created_at ON cart_items(created_at);

-- REVIEWS TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_reviews_product_id ON reviews(product_id);
CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews(rating);
CREATE INDEX IF NOT EXISTS idx_reviews_created_at ON reviews(created_at);
CREATE INDEX IF NOT EXISTS idx_reviews_product_rating ON reviews(product_id, rating);
CREATE INDEX IF NOT EXISTS idx_reviews_product_created ON reviews(product_id, created_at);

-- ADDRESSES TABLE INDEXES
CREATE INDEX IF NOT EXISTS idx_addresses_user_id ON addresses(user_id);
CREATE INDEX IF NOT EXISTS idx_addresses_is_default ON addresses(is_default) WHERE is_default = true;
CREATE INDEX IF NOT EXISTS idx_addresses_user_default ON addresses(user_id, is_default);

-- CATEGORIES TABLE INDEXES (n·∫øu c√≥)
CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories(parent_id) WHERE parent_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_categories_slug ON categories(slug);
CREATE INDEX IF NOT EXISTS idx_categories_is_active ON categories(is_active);

-- Enable pg_trgm extension cho fuzzy search
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- Enable unaccent extension cho Vietnamese search
CREATE EXTENSION IF NOT EXISTS unaccent;

-- Function ƒë·ªÉ search products v·ªõi Vietnamese support
CREATE OR REPLACE FUNCTION search_products_vietnamese(search_term TEXT)
RETURNS TABLE(
    id UUID,
    name TEXT,
    description TEXT,
    price DECIMAL,
    image_url TEXT,
    average_rating DECIMAL,
    rank REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.id,
        p.name,
        p.description,
        p.price,
        p.image_url,
        p.average_rating,
        ts_rank(
            to_tsvector('english', unaccent(p.name || ' ' || COALESCE(p.description, ''))),
            plainto_tsquery('english', unaccent(search_term))
        ) as rank
    FROM products p
    WHERE 
        p.is_active = true
        AND (
            to_tsvector('english', unaccent(p.name || ' ' || COALESCE(p.description, ''))) 
            @@ plainto_tsquery('english', unaccent(search_term))
            OR
            similarity(unaccent(p.name), unaccent(search_term)) > 0.3
        )
    ORDER BY rank DESC, p.average_rating DESC, p.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- Index cho Vietnamese search function
CREATE INDEX IF NOT EXISTS idx_products_vietnamese_search 
ON products USING gin(to_tsvector('english', unaccent(name || ' ' || COALESCE(description, ''))));
`;

// Template cho Email Verification Component
const emailVerificationTemplate = `import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { supabase } from '../../lib/supabase';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Loader2, Mail, CheckCircle, XCircle } from 'lucide-react';

interface EmailVerificationProps {
  email?: string;
  onVerificationComplete?: () => void;
}

export function EmailVerification({ email, onVerificationComplete }: EmailVerificationProps) {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'error'>('pending');

  // T·ª± ƒë·ªông verify n·∫øu c√≥ token trong URL
  useEffect(() => {
    const token = searchParams.get('token');
    const type = searchParams.get('type');
    
    if (token && type === 'email') {
      handleTokenVerification(token);
    }
  }, [searchParams]);

  // X·ª≠ l√Ω verification v·ªõi token
  const handleTokenVerification = async (token: string) => {
    setIsLoading(true);
    setError('');
    
    try {
      const { error } = await supabase.auth.verifyOtp({
        token_hash: token,
        type: 'email'
      });
      
      if (error) throw error;
      
      setVerificationStatus('success');
      setMessage('Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!');
      
      // G·ªçi callback n·∫øu c√≥
      if (onVerificationComplete) {
        onVerificationComplete();
      }
      
      // Redirect sau 2 gi√¢y
      setTimeout(() => {
        navigate('/profile');
      }, 2000);
      
    } catch (error: any) {
      console.error('Email verification error:', error);
      setVerificationStatus('error');
      setError(error.message || 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c email');
    } finally {
      setIsLoading(false);
    }
  };

  // G·ª≠i l·∫°i email x√°c th·ª±c
  const handleResendVerification = async () => {
    if (!email) {
      setError('Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ email');
      return;
    }
    
    setIsResending(true);
    setError('');
    setMessage('');
    
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: email
      });
      
      if (error) throw error;
      
      setMessage('Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.');
      
    } catch (error: any) {
      console.error('Resend verification error:', error);
      setError(error.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·∫°i email x√°c th·ª±c');
    } finally {
      setIsResending(false);
    }
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
        <p className="text-gray-600">ƒêang x√°c th·ª±c email...</p>
      </div>
    );
  }

  // Render success state
  if (verificationStatus === 'success') {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
        <CheckCircle className="h-16 w-16 text-green-600" />
        <h2 className="text-2xl font-bold text-gray-900">X√°c th·ª±c th√†nh c√¥ng!</h2>
        <p className="text-gray-600 text-center max-w-md">
          Email c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng trong gi√¢y l√°t...
        </p>
      </div>
    );
  }

  // Render error state
  if (verificationStatus === 'error') {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
        <XCircle className="h-16 w-16 text-red-600" />
        <h2 className="text-2xl font-bold text-gray-900">X√°c th·ª±c th·∫•t b·∫°i</h2>
        <p className="text-gray-600 text-center max-w-md">
          Kh√¥ng th·ªÉ x√°c th·ª±c email c·ªßa b·∫°n. Link c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.
        </p>
        {email && (
          <Button 
            onClick={handleResendVerification}
            disabled={isResending}
            className="mt-4"
          >
            {isResending ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ƒêang g·ª≠i...
              </>
            ) : (
              'G·ª≠i l·∫°i email x√°c th·ª±c'
            )}
          </Button>
        )}
      </div>
    );
  }

  // Render pending state (ch·ªù user check email)
  return (
    <div className="max-w-md mx-auto">
      <div className="text-center space-y-6">
        <div className="flex justify-center">
          <div className="bg-blue-100 p-4 rounded-full">
            <Mail className="h-8 w-8 text-blue-600" />
          </div>
        </div>
        
        <div className="space-y-2">
          <h2 className="text-2xl font-bold text-gray-900">
            Ki·ªÉm tra email c·ªßa b·∫°n
          </h2>
          <p className="text-gray-600">
            Ch√∫ng t√¥i ƒë√£ g·ª≠i link x√°c th·ª±c ƒë·∫øn email:
          </p>
          {email && (
            <p className="font-medium text-gray-900">{email}</p>
          )}
        </div>
        
        <div className="space-y-4">
          <p className="text-sm text-gray-500">
            Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ (bao g·ªìm c·∫£ th∆∞ m·ª•c spam) v√† nh·∫•p v√†o link x√°c th·ª±c.
          </p>
          
          {email && (
            <Button 
              variant="outline" 
              onClick={handleResendVerification}
              disabled={isResending}
              className="w-full"
            >
              {isResending ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  ƒêang g·ª≠i...
                </>
              ) : (
                'G·ª≠i l·∫°i email x√°c th·ª±c'
              )}
            </Button>
          )}
        </div>
        
        {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
        {message && (
          <Alert variant="success">
            {message}
          </Alert>
        )}
        
        {error && (
          <Alert variant="error">
            {error}
          </Alert>
        )}
        
        <div className="text-sm text-gray-500">
          <p>
            ƒê√£ x√°c th·ª±c email?{' '}
            <button 
              onClick={() => navigate('/login')}
              className="text-blue-600 hover:text-blue-500 font-medium"
            >
              ƒêƒÉng nh·∫≠p ngay
            </button>
          </p>
        </div>
      </div>
    </div>
  );
}

export default EmailVerification;
`;

// Danh s√°ch t·∫•t c·∫£ templates
const templates = {
  'database/rls-policies.sql': rlsPoliciesTemplate,
  'database/functions.sql': functionsTemplate,
  'database/indexes.sql': indexesTemplate,
  'src/components/auth/EmailVerification.tsx': emailVerificationTemplate
};

// Function ƒë·ªÉ t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
function ensureDirectoryExists(filePath) {
  const dir = path.dirname(filePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    log.info(`ƒê√£ t·∫°o th∆∞ m·ª•c: ${dir}`);
  }
}

// Function ƒë·ªÉ t·∫°o m·ªôt file template
function createTemplate(relativePath, content) {
  const fullPath = path.join(process.cwd(), relativePath);
  
  // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i ch∆∞a
  if (fs.existsSync(fullPath)) {
    log.warning(`File ƒë√£ t·ªìn t·∫°i: ${relativePath}`);
    return false;
  }
  
  try {
    // T·∫°o th∆∞ m·ª•c n·∫øu c·∫ßn
    ensureDirectoryExists(fullPath);
    
    // T·∫°o file
    fs.writeFileSync(fullPath, content, 'utf8');
    log.success(`ƒê√£ t·∫°o: ${relativePath}`);
    return true;
  } catch (error) {
    log.error(`L·ªói khi t·∫°o ${relativePath}: ${error.message}`);
    return false;
  }
}

// Function ƒë·ªÉ t·∫°o t·∫•t c·∫£ templates
function generateAllTemplates() {
  log.header('T·∫†O C√ÅC FILE TEMPLATE C·∫¶N THI·∫æT');
  
  let created = 0;
  let skipped = 0;
  
  for (const [filePath, content] of Object.entries(templates)) {
    if (createTemplate(filePath, content)) {
      created++;
    } else {
      skipped++;
    }
  }
  
  log.header('T·ªîNG K·∫æT');
  log.success(`ƒê√£ t·∫°o: ${created} file`);
  if (skipped > 0) {
    log.warning(`ƒê√£ b·ªè qua: ${skipped} file (ƒë√£ t·ªìn t·∫°i)`);
  }
  
  if (created > 0) {
    log.info('\nüìù C√°c b∆∞·ªõc ti·∫øp theo:');
    console.log('1. Ki·ªÉm tra v√† ch·ªânh s·ª≠a c√°c file template v·ª´a t·∫°o');
    console.log('2. Ch·∫°y database migrations: npm run db:migrate');
    console.log('3. Test c√°c component m·ªõi: npm run test');
    console.log('4. Commit changes: git add . && git commit -m "Add templates"');
  }
}

// Function ƒë·ªÉ t·∫°o template c·ª• th·ªÉ
function generateSpecificTemplate(templateName) {
  if (!templates[templateName]) {
    log.error(`Template kh√¥ng t·ªìn t·∫°i: ${templateName}`);
    log.info('C√°c template c√≥ s·∫µn:');
    Object.keys(templates).forEach(name => {
      console.log(`  - ${name}`);
    });
    return;
  }
  
  createTemplate(templateName, templates[templateName]);
}

// Main function
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    // T·∫°o t·∫•t c·∫£ templates
    generateAllTemplates();
  } else {
    // T·∫°o template c·ª• th·ªÉ
    const templateName = args[0];
    generateSpecificTemplate(templateName);
  }
}

// Export cho testing
module.exports = {
  createTemplate,
  generateAllTemplates,
  generateSpecificTemplate,
  templates
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  main();
}